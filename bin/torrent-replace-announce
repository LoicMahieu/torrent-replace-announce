#!/usr/bin/env node

var path = require('path');
var fs = require('fs');
var glob = require('glob');
var mkdirp = require('mkdirp');
var parseTorrent = require('parse-torrent');
var torrentReplaceAnnounce = require('../lib/torrentReplaceAnnounce');

var argv = require('yargs')
    .usage('Usage: $0 -s [search] -r [replacement]')
    .demand(['s', 'r'])
    .describe('h', 'Help')
    .describe('s', 'Search expression')
    .describe('r', 'Replacement')
    .describe('o', 'Output directory')
    .describe('d', 'Dry run')
    .boolean('dry')
    .describe('v', 'Verbose')
    .boolean('v')
    .help('help')
    .alias('d', 'dry')
    .alias('o', 'output')
    .argv;

var verbose = argv.v ? console.log : function () {};

if (!argv.dry && argv.output) {
  mkdirp.sync(argv.output);
}

argv._.forEach(function (file) {
  var torrent = parseTorrent(fs.readFileSync(file));
  var changed = torrentReplaceAnnounce(torrent, argv.s, argv.r);

  if (changed) {
    var newTorrent = parseTorrent.toTorrentFile(torrent);
    var newFile = path.join(
      (argv.output ? argv.output : path.dirname(file)),
      path.basename(file)
    );

    if (!argv.dry) {
      fs.writeFileSync(newFile, newTorrent);
    }

    console.log('File writed: %s', newFile);
  } else {
    verbose('File not matching: %s', file);
  }
});

function usage (code) {
  var r = fs.createReadStream(__dirname +'/usage.txt');
  r.pipe(process.stdout);
  r.on('end', function () {
    if (code) process.exit(code);
  });
}
